Metadata-Version: 1.2
Name: journal
Version: 0.1.0
Summary: A trading journal for options traders.
Home-page: https://github.com/oriesh/trading-journal
Author: Or Shem Tov
Author-email: orieeeams@gmail.com
License: UNKNOWN
Description: ## Options Trading Journal
        
        A trading journal built for options traders from options traders, with the emphasis on premium selling, tastytrade-style.
        
        The goal is to track and organize information about the account's returns and the individual trades so that we can extract valuable insights from this information later on.
        
        The lifetime of each options trade is made up of possible 4 stages:
        
        1. Opening the position
        2. Adjusting the position
        3. Closing the position
        4. Trading the underlying
        
        For each position, we would like to track this information:
        
        ```
        Current timestamp
        Underlying
        Current price
        IV rank
        Strategy name
        Quantity
        Expiration date
        Strikes
        Premium received/paid
        Margin requirements
        Notes
        ```
        
        The database contains 4 tables, each one representing a different part of the trading process and linked with appropriate foreign keys.
        
        The tables are:
        
        - `positions`
        - `trades`
        - `adjustments`
        - `equity_trades`
        
        <b>Built using Python, MySQL, SQLAlchemy, click, pandas</b>
        
        ## Features
        
        - MySQL database connection
        - Functions for communicating with the database in a Pythonic way (opening, closing, adjusting positions and trading the underlying)
        - Functions for reading data from the database into easy-to-work-with pandas DataFrame objects.
        - Relational tables designed for:
          - New positions
          - Closed trades
          - Trade adjustments
          - Trades in the underlying
        - Command-line interface
        
        ## Installation
        
        <b>Clone the repo</b>
        
        `git clone`
        
        <b>Install with pip</b>
        
        `pip install`
        
        <b>Setting environment variables</b>
        Create a `.env` file inside the root and insert the database URL, I'm using the `mysqlconnector` driver, but you can use any driver you'd like:
        
        `DATABASE_URL="mysql+mysqlconnector://[user]:[password]@[host]/[dbname]"`
        
        or export this environment variable:
        
        `export DATABASE_URL="mysql+mysqlconnector://[user]:[password]@[host]/[dbname]"`
        
        ## Usage
        
        ## Contributions
        
        You are more than welcomed to contribute to this package!
        
        - Front end
          - Right now the journal uses a CLI, it'd be nice to built a friendly UI for it.
          - The front end shall be built with ReactJS and SASS
        - RESTful API
          - The future front end would need a way to communicate with our back end MySQL database.
          - The backend RESTful API shall be built with Flask.
          - Requests:
            ###### GET
            - `get_positions`
            - `get_trades`
            - `get_adjustments`
            - `get_equity_trades`
            - `get_trade_analytics`
            ###### POST
            - `open_position`
            - `close_position`
            - `adjust_position`
            - `trade_underlying`
            ###### PUT
            - `update_account_balance` - Send a CSV containing a series of account values and the corresponding dates, this will be used for the account analytics.
        - Testing
          - Since I built this tool for myself and for other apps of mine to interract with, there's not enough QA done on it, for example: type checking, input value checking, etc.
          - Pytest is the preferred testing framework.
        - Docs
          - Building documentation with Sphinx would be nice.
        - Anything you think you can improve!
        
Keywords: journal
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
